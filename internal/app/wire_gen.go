// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"gorm.io/gorm"
	"trello-backend/graph"
	"trello-backend/internal/handlers"
	"trello-backend/internal/repositories"
	"trello-backend/internal/services"
)

// Injectors from wire.go:

// InitializeAPI 初始化 API 相依性
func InitializeAPI(db *gorm.DB, jwtSecret string) (*API, error) {
	userRepository := repositories.NewUserRepository(db)
	authService := services.NewAuthService(userRepository, jwtSecret)
	authHandler := handlers.NewAuthHandler(authService)
	boardRepository := repositories.NewBoardRepository(db)
	boardService := services.NewBoardService(boardRepository)
	listRepository := repositories.NewListRepository(db)
	listService := services.NewListService(listRepository)
	cardRepository := repositories.NewCardRepository(db)
	cardService := services.NewCardService(cardRepository)
	api := NewAPI(authHandler, boardService, listService, cardService)
	return api, nil
}

// wire.go:

// Handler 介面定義所有 handler 必須實作的方法
type Handler interface{}

// API 包含所有的 handlers
type API struct {
	handlers     map[string]Handler
	BoardService services.BoardService
	ListService  services.ListService
	CardService  services.CardService
}

// NewAPI 建立新的 API 實例
func NewAPI(authHandler *handlers.AuthHandler, boardService services.BoardService, listService services.ListService, cardService services.CardService) *API {
	api := &API{
		handlers:     make(map[string]Handler),
		BoardService: boardService,
		ListService:  listService,
		CardService:  cardService,
	}
	api.RegisterHandler("auth", authHandler)
	return api
}

// RegisterHandler 註冊新的 handler
func (a *API) RegisterHandler(name string, handler Handler) {
	a.handlers[name] = handler
}

// GetHandlers 取得所有已註冊的 handlers
func (a *API) GetHandlers() map[string]Handler {
	return a.handlers
}

// 使用者領域的 Provider Set
var userDomainSet = wire.NewSet(repositories.NewUserRepository, services.NewAuthService, handlers.NewAuthHandler)

// Board/List/Card Provider Set
var boardDomainSet = wire.NewSet(repositories.NewBoardRepository, services.NewBoardService)

var listDomainSet = wire.NewSet(repositories.NewListRepository, services.NewListService)

var cardDomainSet = wire.NewSet(repositories.NewCardRepository, services.NewCardService)

// GraphQL Resolver Provider
var resolverSet = wire.NewSet(
	boardDomainSet,
	listDomainSet,
	cardDomainSet, graph.NewResolver,
)

// API Provider Set
var apiSet = wire.NewSet(
	userDomainSet,
	resolverSet,
	NewAPI,
)
